GENERAL STACK FRAME STRUCTURE

stack bottom -->  --------------------
                  |                  |
                  |       .          |
                  |       .          |
                  |       .          |
                  |                  |
                  -------------------- --> Earlier frame
                  |       .          |
                  |       .          |
                  |------------------|
                  |  Argument n      |
                  |------------------|
                  |       .          |
                  |       .          |
                  |------------------|
                  |  Argument 7      |
                  |------------------|
                  |  Return address  |
                  -------------------- --> Frame for calling function P
                  |                  |
                  |  Saved registers |
                  |                  |
                  |------------------|
                  |                  |
                  |  Local variables |
                  |                  |
                  |------------------|
                  |                  |
                  |  Argument build  |
                  |  area            |
                  |                  |
stack top ----->  -------------------- --> Frame for executing function Q
(%rsp)


REGISTERS

64 (q)  |  32 (l/d)  |  16 (w)  |  8 (b)  |  Convention

%rax       %eax         %ax        %al       Return value

%rbx       %ebx         %bx        %bl       Callee saved

%rcx       %ecx         %cx        %cl       4th argument

%rdx       %edx         %dx        %dl       3rd argument

%rsi       %esi         %si        %sil      2nd argument

%rdi       %edi         %di        %dil      1st argument

%rbp       %ebp         %bp        %bpl      Callee saved

%rsp       %esp         %sp        %spl      Stack pointer

%r8        %r8d         %r8w       %r8b      5th argument

%r9        %r9d         %r9w       %r9b      6th argument

%r10       %r10d        %r10w      %r10b     Caller saved

%r11       %r11d        %r11w      %r11b     Caller saved

%r12       %r12d        %r12w      %r12b     Callee saved

%r13       %r13d        %r13w      %r13b     Callee saved

%r14       %r14d        %r14w      %r14b     Callee saved

%r15       %r15d        %r15w      %r15b     Callee saved


INSTRUCTION REFERENCE

http://ref.x86asm.net/coder.html


AT&T MNEMONIC VS INTEL MNEMONIC

https://sourceware.org/binutils/docs/as/i386_002dMnemonics.html


EXCEPTIONS TO NOTE

* Cannot have both source and destination be memory addresses

* When movl has a register as destination, it sets the high-order portion of the
  register to 0


ASSEMBLY GENERATION COMMANDS

1. Generate assembly code from source:

   $ gcc -Og -S source.c


2. Dissasemble object files:

   $ objdump -CD source.o

   or

   $ objdump -CD source.o | vim -
   (then `set ft=asm` for syntax highlighting)

