PORT ASSIGNMENT

see /etc/services file


BYTE ORDER

Network byte order  :   Big-Endian
Host byte order     :   Processor dependent (Check with `lscpu`)


BYTE ORDER CONVERSIONS

See `man byteorder`


SOCKET STRUCTURES

struct addrinfo (See `man getaddrinfo`):

    struct addrinfo {
        int             ai_flags;       // AI_PASSIVE, AI_CANNONNAME, etc
        int             ai_family;      // AF_INET, AF_INET6, AF_UNSPEC
        int             ai_socktype;    // SOCK_STREAM, SOCK_DGRAM
        int             ai_protocol;    // use 0 for 'any'
        size_t          ai_addrlen;     // size of ai_addr in bytes
        struct sockaddr *ai_addr;       // struct sockaddr_in or _in6
        char            *ai_canonname;  // full canonical hostname

        struct addrinfo *ai_next;       // linked list, next node
    };

struct sockaddr (See `man sockaddr`):

    struct sockaddr {
        unsigned short sa_family;       // address family, AF_xxx
        char           sa_data[14];     // 14 bytes of protocol address
    };

Helper structs which can be cast to 'struct sockaddr':

    struct sockaddr_in {
        short int      sin_family;  // address family, AF_INET
        unsigned short sin_port;    // port number
        struct in_addr sin_addr;    // internet address
        unsigned char  sin_zero[8]; // match size of struct sockaddr
    };

    struct in_addr {
        uint32_t s_addr;    // 4 bytes
    };

    struct sockaddr_in6 {
        u_int16_t       sin6_family;     // address family, AF_INET6
        u_int16_t       sin6_port;       // port number, Network Byte Order
        u_int32_t       sin6_flowinfo;   // IPv6 flow information
        struct in6_addr sin6_addr;       // IPv6 address
        u_int32_t       sin6_scope_id;   // scope ID
    };

    struct in6_addr {
        unsigned char   s6_addr[16];    // IPv6 address
    };

    struct sockaddr_storage {
        sa_family_t ss_family;  // address family

        // all this is padding, implementation specific, ignore it:
        char    __ss_pad1[_SS_PAD1SIZE];
        int64_t __ss_align;
        char    __ss_pad2[_SS_PAD2SIZE];
    };


STORE STRING IP ADDRESS IN SOCKET STRUCTURE

Use inet_pton(). See `man inet_pton`.

    struct sockaddr_in  sa;     // IPv4
    struct sockaddr_in6 sa6;    // IPv6

    /*
     * NB: the return code of calls to inet_pton should be checked
     */
    inet_pton(AF_INET, "10.12.110.57", &(sa.sin_addr)); // IPv4
    inet_pton(AF_INET6, "2001:db8:63b3:1::3490", &(sa6.sin6_addr)); // IPv6


GET STRING IP ADDRESS FROM SOCKET STRUCTURE

Use inet_ntop(). See `man inet_ntop`.

    /* IPv4 */

    char ip4[INET_ADDRSTRLEN];  // space to hold the IPv4 string
    struct sockaddr_in sa;      // pretend this is loaded with something

    inet_ntop(AF_INET, &(sa.sin_addr), ip4, INET_ADDRSTRLEN);

    printf("The IPv4 address is: %s\n", ip4);


    /* IPv6 */

    char ip6[INET6_ADDRSTRLEN]; // space to hold the IPv6 string
    struct sockaddr_in6 sa6;    // pretend this is loaded with something

    inet_ntop(AF_INET6, &(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);

    printf("The address is: %s\n", ip6);


SOCKET API USAGE

1. getaddrinfo()

    #include <sys/types.h>
    #include <sys/socket.h>
    #include <netdb.h>

    int getaddrinfo(const char *node,       // eg. www.example.com or IP addr
                    const char *service,    // eg. http or port number
                    const struct addrinfo *hints;
                    struct addrinfo **res);

    /* ... */
    int status;
    struct addrinfo hints;
    struct addrinfo *servinfo;  // will point to the results

    memset(&hints, 0, sizeof(hints);    // make sure the struct is empty
    hints.ai_family = AF_UNSPEC;        // don't care IPv4 or IPv6
    hints.ai_socktype = SOCK_STREAM;    // TCP stream sockets
    hints.ai_flags = AI_PASSIVE;        // fill in IP for me

    if ((status = getaddrinfo(NULL, "3490", &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo error: %s\n", gai_strerror(status));
        exit(1);
    }

    // servinfo now points to a linked list of 1 or more struct addrinfos

    // do everything until you don't need servinfo anymore...

    freeaddrinfo(servinfo); // free the linked list

2. socket()

    #include <sys/types.h>
    #include <sys/socket.h>

    int socket(int domain, int type, int protocol);

    /* ... */
    int s;
    struct addrinfo hints, *res;

    // do the lookup
    // pretend we already filled out the "hints" struct
    getaddrinfo("www.example.com", "http", &hints, &res);

    // again, you should do error-checking on getaddrinfo(), and walk
    // the "res" linked list looking for valid entries instead of just
    // assuming the first one is good (like many of these examples do).
    // See the section on client/server for real examples.

    s = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

3. bind()

    #include <sys/types.h>
    #include <sys/socket.h>

    int bind(int sockfd, struct sockaddr *my_addr, int addrlen);

    /* ... */
    struct addrinfo hints, *res;
    int sockfd;

    // first, load up address structs with getaddrinfo():

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;    // use IPv4 or IPv6, whichever
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;    // fill in my IP for me

    getaddrinfo(NULL, "3490", &hints, &res);

    // make a socket:

    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

    // bind it to the port we passed in to getaddrinfo():

    bind(sockfd, res->ai_addr, res->ai_addrlen);

4. connect()

    #include <sys/types.h>
    #include <sys/socket.h>

    int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);

    /* ... */
    struct addrinfo hints, *res;
    int sockfd;

    // first, load up address structs with getaddrinfo():

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;

    getaddrinfo("www.example.com", "3490", &hints, &res);

    // make a socket:

    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);

    // connect!

    connect(sockfd, res->ai_addr, res->ai_addrlen);


SOCKET OPTIONS

1. Reuse port

    int yes = 1;

    if (setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof yes) == -1)
    {
        perror("setsockopt");
        exit(1);
    }
